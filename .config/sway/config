# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term foot
# TODO: open terminal in same directory as cwd of previous terminal?
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
#set $menu dmenu_path | dmenu | xargs swaymsg exec --

# Use sway-launcher-desktop instead b/c it supports .desktop files
#for_window [app_id="^launcher$"] floating enable, sticky enable, resize set 30 ppt 60 ppt, border pixel 10
#set $menu "$term --app-id=launcher -e sway-launcher-desktop"

set $menu "fuzzel --show-actions"

# Clipboard manager: start at launch
# https://wiki.archlinux.org/title/Sway#Clipboard
exec wl-paste -t text --watch clipman store --no-persist

# Allow GUI programs to request sudo access
exec /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
output * bg /usr/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill
#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs
#output eDP-1 scale 1.5
#output "Dell Inc. DELL S2721DGF B41QT83" resolution 2560x1440@119.998Hz
set $display1 eDP-1
set $display2 DP-2

# Enable adaptive sync for all supported displays
output * adaptive_sync on

### Idle configuration
#
# Example configuration:
#
exec swayidle -w \
         timeout 600 'swaylock -f -c 000000' \
         timeout 610 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
         before-sleep 'swaylock -f -c 000000'

# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.
# Automatically enable numlock (if the device has it)
input type:keyboard {
    xkb_numlock enable
    #xkb_options caps:swapescape
    xkb_options caps:escape
}
input type:touchpad {
    # disable while typing
    dwt enabled
    tap enabled
    natural_scroll enabled
    middle_emulation enabled
}

# Don't change focus with the mouse (without clicking). Keeps the behavior of other DEs like GNOME
focus_follows_mouse no

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+Shift+x kill
    bindsym Alt+F4 kill # old habits die hard :)

    # Start your launcher
    bindsym $mod+d exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    # NOTE: firefox seems to crash during a refresh
    # https://bugzilla.mozilla.org/show_bug.cgi?id=1652820
    bindsym $mod+Shift+r reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+q exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Switch to workspace
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.

    # Assign odd workspaces to the left display, and evens to the right display
    workspace 1 output $display1 $display2
    workspace 3 output $display1 $display2
    workspace 5 output $display1 $display2
    workspace 7 output $display1 $display2
    workspace 9 output $display1 $display2
    workspace 2 output $display2 DP-1 DP-3 DP-4 $display1
    workspace 4 output $display2 DP-1 DP-3 DP-4 $display1
    workspace 6 output $display2 DP-1 DP-3 DP-4 $display1
    workspace 8 output $display2 DP-1 DP-3 DP-4 $display1
    workspace 10 output $display2 DP-1 DP-3 DP-4 $display1

    # Switching to the active workspace will instead go to the previous workspace
    workspace_auto_back_and_forth yes

    # Make all workspaces tabbed by default
    workspace_layout tabbed

    # Move between workspaces
    bindsym $mod+Alt+$left workspace prev
    bindsym $mod+Alt+$down workspace prev_on_output
    bindsym $mod+Alt+$up workspace next_on_output
    bindsym $mod+Alt+$right workspace next
    # ; like tmux
    bindsym $mod+Alt+Semicolon workspace back_and_forth 
    # TODO: Shift+Alt+Semicolon for moving window to last workspace
    # Or use $mod+[up|down|left|right] to move on the same display
    bindsym $mod+Alt+Left workspace prev
    bindsym $mod+Alt+Down workspace prev_on_output
    bindsym $mod+Alt+Up workspace next_on_output
    bindsym $mod+Alt+Right workspace next

    # Move windows to workspaces using similar bindings
    bindsym $mod+Alt+Shift+$left move container to workspace prev
    bindsym $mod+Alt+Shift+$down move container to workspace prev_on_output
    bindsym $mod+Alt+Shift+$up move container to workspace next_on_output
    bindsym $mod+Alt+Shift+$right move container to workspace next
    bindsym $mod+Alt+Shift+Semicolon move container to workspace back_and_forth 
    bindsym $mod+Alt+Shift+Left move container to workspace prev
    bindsym $mod+Alt+Shift+Down move container to workspace prev_on_output
    bindsym $mod+Alt+Shift+Up move container to workspace next_on_output
    bindsym $mod+Alt+Shift+Right move container to workspace next

#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+z fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad, floating disable

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 40px
    bindsym $down resize grow height 40px
    bindsym $up resize shrink height 40px
    bindsym $right resize grow width 40px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 40px
    bindsym Down resize grow height 40px
    bindsym Up resize shrink height 40px
    bindsym Right resize grow width 40px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

# Volume control
# from: https://www.reddit.com/r/swaywm/comments/qei3oh/comment/hhtvsen/3
#bindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle
#bindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5%
#bindsym XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5%

# Volume control and brightness bindings
# An alternative is `wob`
exec "avizo-service"
bindsym XF86AudioRaiseVolume exec volumectl -u up
bindsym XF86AudioLowerVolume exec volumectl -u down
bindsym XF86AudioMute exec volumectl toggle-mute
bindsym XF86AudioMicMute exec volumectl -m toggle-mute

bindsym XF86MonBrightnessUp exec lightctl up
bindsym XF86MonBrightnessDown exec lightctl down

# Media control
bindsym XF86AudioPrev exec playerctl previous
bindsym XF86AudioNext exec playerctl next
bindsym XF86AudioPlay exec playerctl play-pause

# Notification daemon
exec swaync
bindsym $mod+n exec swaync-client -t -sw

# TODO: more screenshot commands
# Screenshot region
bindsym $mod+Shift+s exec grim -g "$(slurp)" -t png - | wl-copy -t "image/png"
# Manual lock. "$mod+l" (preferred) overlaps with movement bindings
bindsym $mod+Ctrl+l exec killall -USR1 swayidle

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    swaybar_command waybar
}

gaps inner 4
gaps outer 0
smart_gaps on

include /etc/sway/config.d/*

assign [app_id="pulseeffects"] 1
assign [class="discord"] 1
assign [class="Signal"] 1

# Looks like spotify is/was historically a problem for sway
# See: https://github.com/swaywm/sway/issues/3793
# This seems to work
for_window [class="Spotify"] move container to workspace 1

# Note edit windows should float
# TODO: maek sure this works with other Okular windows as well
for_window [title="^New.*Note.*Okular$" app_id="org.kde.okular"] floating enable

# title="!(^Zoom Meeting$)"
# TODO: make everything EXCEPT the "Zoom Meeting" window float
# TODO: inhibit idle when in zoom meeting
for_window [app_id="^zoom$"] floating enable

# Maybe there's a race condition? does it start too early or something?
# External display is usually frozen at startup with the highest settings.
# requires `DP-2 disable` `DP-2 enable`, and everything works.
# TODO: refresh kanshi after Sway refresh? if display config doesn't get reset properly
# IDK which one of these commands actually works lol. `exec` doesn't work on
# reload I think
#exec kanshi
#exec_always (pkill kanshi || 0); exec kanshi

# Inhibit swayidle's idle timer when focused on a steam game
# Source: https://github.com/swaywm/swayidle/issues/5#issuecomment-670779101=
for_window [class="steam_app*"] inhibit_idle focus

# forgot what this was needed for :'(
exec dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=sway

# Start daemons via systemctl
exec_always "system_ctl --user import-environment; systemctl --user start sway-session.target"

# TODOs
# pulseeffects, discord, spotify placement (split/tab workspace automatically)
# rename windows
# ssh-agent
# better waybar
# switching between headphones/speakers & HDMI audio. automatically detect when earbuds plug in?
# stacking?
# add tmux splitting commands
# autostart
# halfqwerty layout!
# automatically partition along longest axis??
# power: suspend, battery warnings
# power menu options: https://github.com/NOOBDY/dotfiles/blob/master/sway/scripts/power-menu.sh and https://github.com/luispabon/sway-dotfiles/blob/master/scripts/wofi-power.sh
# udisk(ie?) for USB automount
# screenshots
# TODO: media play/pause/next
# alt-tab, or equivalent
# searching through windows. Maybe through rofi?
# zoom pop-up windows, google "sway zoom floating windows" or the like. example: https://www.reddit.com/r/swaywm/comments/l9asbc/zoom_on_sway_what_settings_do_you_use/
# screensharing: https://www.reddit.com/r/swaywm/comments/ry24ef/discord_zoom_screensharing/
# polkit for graphical sudo??
# dex for autostart applications
# force dark theme for all applications
# redshift equivalent
# waybar service?? so we can have different waybar configs for different monitor setups, or something https://github.com/Madic-/Sway-DE/blob/master/config/systemd/user/waybar.service.j2
# assign workspaces to different monitors (e.g. 1&2 on small screen only, all other workspaces on main monitor?)
# binding to highlight the active pane (a la tmux)? or maybe better theming for the active window
# vim-like marks for jumping (see: https://aur.archlinux.org/packages/sway-marker-git)
# tmux-like rename container binding?
# Super+Alt+arrow = move to workspace; maybe up/down can take to the previous workspace
# waybar: show scratchpad status

# swayr
bindsym $mod+c exec swayr execute-swaymsg-command
bindsym $mod+Shift+c exec swayr execute-swayr-command
bindsym $mod+f exec swayr switch-to
#bindsym $mod+f exec swayr switch-workspace-container-or-window
bindsym $mod+Semicolon exec swayr switch-to-urgent-or-lru-window
bindsym $mod+Tab exec swayr switch-to-urgent-or-lru-window
# Alt-tab
bindsym Mod1+Tab exec swayr switch-to-urgent-or-lru-window
bindsym $mod+Delete exec swayr quit-window

# Ask to start programs at login
exec swaynag -t warning -m 'Start desktop programs?' -z 'Yes, start programs' "(flatpak run com.discordapp.Discord & disown) && (pulseeffects & disown) && ($term btop -T btop & disown) && (signal-desktop & disown)"
